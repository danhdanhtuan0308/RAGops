version: "3.8"

x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
  environment:
    # Core Airflow
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    # Make your local code importable: include /opt/airflow (parent of 'ingestion')
    PYTHONPATH: /opt/airflow:/opt/airflow/dags

    # GCP ADC
    GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/google-credentials.json

    # Install extra deps on container start (no Dockerfile needed)
    PIP_ADDITIONAL_REQUIREMENTS: >-
      feedparser>=6.0.11 pandas>=2.3.2 requests>=2.32.5
      pyarrow>=21.0.0 fsspec>=2024.6.0 gcsfs>=2024.6.1

    # File ownership for mounted volumes
    AIRFLOW_UID: ${AIRFLOW_UID:-50000}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ../ingestion:/opt/airflow/ingestion:ro
    - ./keys:/opt/airflow/keys:ro
  user: "${AIRFLOW_UID:-50000}:0"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
    command: ["bash", "-c", "airflow db upgrade && airflow users create --role Admin --username \"${AIRFLOW_USERNAME:-airflow}\" --password \"${AIRFLOW_PASSWORD:-airflow}\" --firstname Admin --lastname User --email admin@example.com || true"]

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: scheduler

  airflow-webserver:
    <<: *airflow-common
    depends_on:
      postgres:
        condition: service_healthy
      airflow-scheduler:
        condition: service_started
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  postgres-db-volume:
