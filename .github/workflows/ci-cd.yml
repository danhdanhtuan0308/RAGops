name: CI-CD

on:
  push:
    branches:
      - main
      - RAGops
  pull_request:
    branches:
      - main
      - RAGops
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          clean: false
          path: _workspace
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r _workspace/backend/requirements.txt
          pip install pytest
      - name: Run unit and integration tests
        env:
          OPENAI_API_KEY: test-key
          COHERE_API_KEY: test-key
        run: |
          pytest -q _workspace/backend/tests

  deploy-gcp:
    if: "github.ref == 'refs/heads/main'"
    needs: ci
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.CLOUD_RUN_REGION || 'us-central1' }}
      SERVICE_NAME: ragops-backend
      REPO: ragops
      IMAGE: backend
    steps:
      - uses: actions/checkout@v4
        with:
          clean: false
          path: _workspace
      - name: Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER && secrets.GCP_SERVICE_ACCOUNT && !secrets.GCP_SA_KEY }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Auth via Service Account Key
        if: ${{ secrets.GCP_SA_KEY && (!secrets.GCP_WORKLOAD_IDENTITY_PROVIDER || !secrets.GCP_SERVICE_ACCOUNT) }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Fail if GCP auth not configured
        if: ${{ !secrets.GCP_SA_KEY && (!secrets.GCP_WORKLOAD_IDENTITY_PROVIDER || !secrets.GCP_SERVICE_ACCOUNT) }}
        run: |
          echo "::error::Configure either GCP_SA_KEY or both GCP_WORKLOAD_IDENTITY_PROVIDER and GCP_SERVICE_ACCOUNT secrets." && exit 1
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet
      - name: Ensure Artifact Registry repository exists
        run: |
          set -e
          if ! gcloud artifacts repositories describe ${REPO} --location=${REGION} >/dev/null 2>&1; then
            gcloud artifacts repositories create ${REPO} \
              --repository-format=docker \
              --location=${REGION} \
              --description="RAGops container images"
          fi
      - name: Compute image tag
        id: meta
        run: |
          IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${IMAGE}:$GITHUB_SHA"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Build and push image
        working-directory: _workspace/backend
        run: |
          docker build -t "${{ steps.meta.outputs.IMAGE_URI }}" .
          docker push "${{ steps.meta.outputs.IMAGE_URI }}"
      - name: Deploy to Cloud Run
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          MILVUS_URI: ${{ secrets.MILVUS_URI }}
          MILVUS_TOKEN: ${{ secrets.MILVUS_TOKEN }}
          MILVUS_SECURE: ${{ secrets.MILVUS_SECURE || 'true' }}
        run: |
          gcloud run deploy ${SERVICE_NAME} \
            --project ${PROJECT_ID} \
            --region ${REGION} \
            --image "${{ steps.meta.outputs.IMAGE_URI }}" \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --cpu 2 --memory 2Gi \
            --concurrency 20 \
            --timeout 1800 \
            --set-env-vars OPENAI_API_KEY=${OPENAI_API_KEY},COHERE_API_KEY=${COHERE_API_KEY},MILVUS_URI=${MILVUS_URI},MILVUS_TOKEN=${MILVUS_TOKEN},MILVUS_SECURE=${MILVUS_SECURE}
      - name: Output service URL
        run: |
          URL=$(gcloud run services describe ${SERVICE_NAME} --region ${REGION} --format='value(status.url)')
          echo "service_url=${URL}" >> $GITHUB_OUTPUT
      - name: Smoke test /status
        run: |
          URL=$(gcloud run services describe ${SERVICE_NAME} --region ${REGION} --format='value(status.url)')
          echo "Hitting: ${URL}/status"
          for i in {1..20}; do
            if curl -sf "${URL}/status" | grep -E '"status"\s*:\s*"ok"' >/dev/null; then
              echo "Service healthy"; exit 0; fi; sleep 5; done
          echo "Service health check failed" && exit 1
