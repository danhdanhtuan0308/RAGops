services:
  # Milvus standalone service
  milvus:
    image: milvusdb/milvus:v2.3.4
    platform: linux/amd64
    container_name: milvus-standalone
    command: ["milvus", "run", "standalone"]
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - ${PWD}/milvus/data:/var/lib/milvus/data
      - ${PWD}/milvus/conf:/var/lib/milvus/conf
      - ${PWD}/milvus/logs:/var/lib/milvus/logs
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ragops-network

  # Etcd service for Milvus metadata
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${PWD}/etcd/data:/etcd/data
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd/data
    ports:
      - "2379:2379"
    networks:
      - ragops-network

  # MinIO service for Milvus object storage
  minio:
    image: minio/minio:RELEASE.2022-03-17T06-34-49Z
    container_name: milvus-minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ${PWD}/minio/data:/minio/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /minio/data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ragops-network

  # Milvus Attu UI service
  attu:
    image: zilliz/attu:v2.2.6
    platform: linux/amd64
    container_name: milvus-attu
    environment:
      - MILVUS_URL=milvus:19530
    ports:
      - "8888:3000"
    depends_on:
      - "milvus"
    networks:
      - ragops-network

  # FastAPI application service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragops-backend
    labels:
      co.elastic.logs/enabled: "true"
      co.elastic.logs/json.enabled: "true"
      co.elastic.logs/json.add_error_key: "true"
      co.elastic.logs/json.overwrite_keys: "true"
      co.elastic.logs/json.keys_under_root: "true"
    environment:
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SEM_CACHE_THRESHOLD=0.9
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
    volumes:
      - .:/app
      - ./gcp-credentials.json:/app/gcp-credentials.json:ro
    ports:
      - "3030:8000"
    depends_on:
      - "milvus"
      - "redis"
    networks:
      - ragops-network
    restart: on-failure
    command: uvicorn app:app --host 0.0.0.0 --port 8000

  # Redis for semantic caching
  redis:
    image: redis/redis-stack-server:latest
    container_name: ragops-redis
    ports:
      - "6379:6379"
    command: ["redis-stack-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - ragops-network

  # RedisInsight UI for browsing Redis locally at http://localhost:5540
  redisinsight:
    image: redis/redisinsight:latest
    container_name: ragops-redisinsight
    ports:
      - "5540:5540"
    environment:
      - RI_AUTH_ENABLED=false
    depends_on:
      - redis
    networks:
      - ragops-network

networks:
  ragops-network:
    driver: bridge

volumes:
  redis-data:
